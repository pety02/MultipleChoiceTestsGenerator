namespace MultipleChoiceTestsGenerator
{
    /// <summary>
    /// This class describes test dimensions form.
    /// </summary>
    public partial class TestDimensionsForm : Form
    {
        private TestQuestion[] customQuestions;     // array of custom questions
        private int customQuestionsIndex;           // custom questions index

        /// <summary>
        /// Starts the generated by the server test.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void startTestButton_Click(object sender, EventArgs e)
        {
            int questionsCount = int.Parse(questionsCountTextBox.Text);
            string studentName = studentNameTextBox.Text;
            int seconds = int.Parse(timeTextBox.Text);

            this.Hide();
            TestForm testForm = new TestForm(questionsCount, seconds, studentName, customQuestions);
            testForm.ShowDialog();
        }

        /// <summary>
        /// Validating the student name field on typing.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void studentNameTextBox_TextChanged(object sender, EventArgs e)
        {
            if (!InputValidator.IsValidNumberInput(questionsCountTextBox.Text)
                || !InputValidator.IsValidNumberInput(timeTextBox.Text)
                || studentNameTextBox.Text == "")
            {
                startTestButton.Enabled = false;
                return;
            }
        }

        /// <summary>
        /// Validating the time in seconds field on typing.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void timeTextBox_TextChanged(object sender, EventArgs e)
        {
            if (!InputValidator.IsValidNumberInput(questionsCountTextBox.Text)
                || !InputValidator.IsValidNumberInput(timeTextBox.Text)
                || studentNameTextBox.Text == "")
            {
                startTestButton.Enabled = false;
                return;
            }

            startTestButton.Enabled = true;
        }

        /// <summary>
        /// Validating the questions count field on typing.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void questionsCountTextBox_TextChanged(object sender, EventArgs e)
        {
            if (!InputValidator.IsValidNumberInput(questionsCountTextBox.Text)
                || !InputValidator.IsValidNumberInput(timeTextBox.Text)
                || studentNameTextBox.Text == "")
            {
                startTestButton.Enabled = false;
                return;
            }

            startTestButton.Enabled = true;
        }

        /// <summary>
        /// Validates the custom questions count text field.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void customQuestionsCountField_TextChanged(object sender, EventArgs e)
        {
            if (!InputValidator.IsValidNumberInput(customQuestionsCountField.Text))
            {
                startTestButton.Enabled = false;
                return;
            }

            startTestButton.Enabled = true;
        }

        /// <summary>
        /// Check if any string is null or empty string for validation purposes.
        /// </summary>
        /// <param name="fieldValue"> the value of the field </param>
        private void CheckForNonEmptyTextFields(string fieldValue)
        {
            if (fieldValue.Equals(String.Empty))
            {
                startTestButton.Enabled = false;
                addCustomQuestionButton.Enabled = false;
                return;
            }

            startTestButton.Enabled = true;
            addCustomQuestionButton.Enabled = true;
        }

        /// <summary>
        /// Validates wheather custom question text field has changed.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void customQuestionTextField_TextChanged(object sender, EventArgs e)
        {
            CheckForNonEmptyTextFields(customQuestionTextField.Text);
        }

        /// <summary>
        /// Validates wheather first custom answer text field has changed.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void firstAnswerTextField_TextChanged(object sender, EventArgs e)
        {
            CheckForNonEmptyTextFields(firstAnswerTextField.Text);
        }

        /// <summary>
        /// Validates wheather second custom answer text field has changed.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void secondAnswerTextField_TextChanged(object sender, EventArgs e)
        {
            CheckForNonEmptyTextFields(secondAnswerTextField.Text);
        }

        /// <summary>
        /// Validates wheather third custom answer text field has changed.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void thirdAnswerTextField_TextChanged(object sender, EventArgs e)
        {
            CheckForNonEmptyTextFields(thirdAnswerTextField.Text);
        }

        /// <summary>
        /// Validates wheather fourth custom answer text field has changed.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void fourthAnswerTextField_TextChanged(object sender, EventArgs e)
        {
            CheckForNonEmptyTextFields(fourthAnswerTextField.Text);
        }

        /// <summary>
        /// Validates custom question's correct answers.
        /// </summary>
        private void CheckForCustomCorrectAnswers()
        {
            if (!isFirstAnswerCorrectCheckBox.Checked
                && !isSecondAnswerCorrectCheckBox.Checked
                && !isThirdAnswerCorrectCheckBox.Checked
                && !isFourthAnswerCorrectCheckBox.Checked)
            {
                startTestButton.Enabled = false;
                addCustomQuestionButton.Enabled = false;
                return;
            }

            startTestButton.Enabled = true;
            addCustomQuestionButton.Enabled = true;
        }

        /// <summary>
        /// Validates custom question's correct answers.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void isFirstAnswerCorrectCheckBox_CheckedChanged(object sender, EventArgs e)
        {
            CheckForCustomCorrectAnswers();
        }

        /// <summary>
        /// Validates custom question's correct answers.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void isSecondAnswerCorrectCheckBox_CheckedChanged(object sender, EventArgs e)
        {
            CheckForCustomCorrectAnswers();
        }

        /// <summary>
        /// Validates custom question's correct answers.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void isThirdAnswerCorrectCheckBox_CheckedChanged(object sender, EventArgs e)
        {
            CheckForCustomCorrectAnswers();
        }

        /// <summary>
        /// Validates custom question's correct answers.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void isFourthAnswerCorrectCheckBox_CheckedChanged(object sender, EventArgs e)
        {
            CheckForCustomCorrectAnswers();
        }

        /// <summary>
        /// Initialize custom questions array with extraQuestionsCount questions' slots.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void createCustomQuestionsArrayButton_Click(object sender, EventArgs e)
        {
            if (!InputValidator.IsValidNumberInput(customQuestionsCountField.Text))
            {
                MessageBox.Show("Please, type valid custom questions count bigger or equal to 1!");
                return;
            }
            int extraQuestionsCount = int.Parse(customQuestionsCountField.Text);
            customQuestionsIndex = 0;
            customQuestions = new TestQuestion[extraQuestionsCount];
            customQuestionsCountField.Enabled = false;
            createCustomQuestionsArrayButton.Enabled = false;
            MessageBox.Show($"Superb! You created an array of {extraQuestionsCount} extra questions just now." +
                $" So add your custom questions to your test before start solving it.");
        }

        /// <summary>
        /// Gets the answer at index position text.
        /// </summary>
        /// <param name="index"> the position of the answer </param>
        /// <returns></returns>
        /// <exception cref="Exception"> Throws Exception with a custom message when the index is out of range. </exception>
        private string GetCurrentAnswer(int index)
        {
            switch (index)
            {
                case 1: return firstAnswerTextField.Text;
                case 2: return secondAnswerTextField.Text;
                case 3: return thirdAnswerTextField.Text;
                case 4: return fourthAnswerTextField.Text;
                default: throw new Exception("No answer with this index!");
            }
        }

        /// <summary>
        /// Checks wheather the answer on indexed position is set to be correct or not.
        /// </summary>
        /// <param name="index"> the position of the answer </param>
        /// <returns> true when the answer is set to be correct and false if it is not correct. </returns>
        private bool IsCorrectAnswer(int index)
        {
            switch (index)
            {
                case 1: return isFirstAnswerCorrectCheckBox.Checked;
                case 2: return isSecondAnswerCorrectCheckBox.Checked;
                case 3: return isThirdAnswerCorrectCheckBox.Checked;
                case 4: return isFourthAnswerCorrectCheckBox.Checked;
                default: return false;
            }
        }

        /// <summary>
        /// Constructs a custom question and set it on indexed position in the 
        /// customQuestions array.
        /// </summary>
        private void ConstructCustomQuestion()
        {
            string questionText = customQuestionTextField.Text;
            string[] possibleAnswers = new string[4];
            string[] correctAnswers = new string[4];
            for (int i = 1; i <= 4; ++i)
            {
                possibleAnswers[i - 1] = GetCurrentAnswer(i);
                if (IsCorrectAnswer(i))
                {
                    correctAnswers[i - 1] = GetCurrentAnswer(i);
                }
            }

            customQuestions[customQuestionsIndex++] = new TestQuestion(questionText,
                possibleAnswers, correctAnswers);
        }

        /// <summary>
        /// Clears the custom question panel after insertion of a new custom question.
        /// </summary>
        private void ClearCustomQuestionPanel()
        {
            customQuestionTextField.Text = "";
            firstAnswerTextField.Text = "";
            isFirstAnswerCorrectCheckBox.Checked = false;
            secondAnswerTextField.Text = "";
            isSecondAnswerCorrectCheckBox.Checked = false;
            thirdAnswerTextField.Text = "";
            isThirdAnswerCorrectCheckBox.Checked = false;
            fourthAnswerTextField.Text = "";
            isFourthAnswerCorrectCheckBox.Checked = false;
        }

        /// <summary>
        /// Inserts new custom question with its answers, clears the panel 
        /// after that and show message about the proccess.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void addCustomQuestionButton_Click(object sender, EventArgs e)
        {
            ConstructCustomQuestion();
            ClearCustomQuestionPanel();

            MessageBox.Show("You add this question successfully!");
            if (customQuestions.Length <= customQuestionsIndex)
            {
                addCustomQuestionButton.Enabled = false;
                startTestButton.Enabled = true;
                return;
            }
        }

        /// <summary>
        /// TestDimensionsForm default constructor.
        /// </summary>
        public TestDimensionsForm()
        {
            InitializeComponent();

            if (!InputValidator.IsValidNumberInput(questionsCountTextBox.Text)
                || !InputValidator.IsValidNumberInput(timeTextBox.Text)
                || studentNameTextBox.Text == "")
            {
                startTestButton.Enabled = false;
                addCustomQuestionButton.Enabled = false;
                return;
            }

            startTestButton.Enabled = true;
        }
    }
}